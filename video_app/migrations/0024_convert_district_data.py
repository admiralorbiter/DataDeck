# Generated by Django 5.1.1 on 2025-02-13 09:09

from django.db import migrations

def convert_districts(apps, schema_editor):
    CustomAdmin = apps.get_model('video_app', 'CustomAdmin')
    District = apps.get_model('video_app', 'District')
    Observer = apps.get_model('video_app', 'Observer')
    
    # Get unique districts from existing records
    admin_districts = set(CustomAdmin.objects.values_list('district', flat=True).distinct())
    observer_districts = set(Observer.objects.values_list('district', flat=True).distinct())
    existing_districts = admin_districts | observer_districts
    
    # Create District objects
    district_mapping = {}
    for district_name in existing_districts:
        if district_name:  # Skip empty district names
            district = District.objects.create(
                name=district_name,
                code=district_name.upper().replace(' ', '_')[:20]  # Simple code generation
            )
            district_mapping[district_name] = district
    
    # Update CustomAdmin records
    for admin in CustomAdmin.objects.all():
        if admin.district in district_mapping:
            admin.district_new = district_mapping[admin.district]
            admin.save()
    
    # Update Observer records
    for observer in Observer.objects.all():
        if observer.district in district_mapping:
            observer.district_new = district_mapping[observer.district]
            observer.save()

def reverse_convert_districts(apps, schema_editor):
    pass  # We don't need reverse since we're keeping the old field until confirmed

class Migration(migrations.Migration):
    dependencies = [
        ('video_app', '0023_create_district_model'),
    ]

    operations = [
        migrations.RunPython(convert_districts, reverse_convert_districts),
    ]
